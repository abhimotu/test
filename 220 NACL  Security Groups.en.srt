1
00:00:00,010 --> 00:00:00,843
<v Instructor>Okay, in this lecture,</v>

2
00:00:00,843 --> 00:00:03,460
let's talk about network ACLs and security group.

3
00:00:03,460 --> 00:00:05,400
So it is super important for you to understand

4
00:00:05,400 --> 00:00:08,300
the distinction because it can come up very often

5
00:00:08,300 --> 00:00:10,010
in the exam to understand what's the difference

6
00:00:10,010 --> 00:00:13,710
between network ACLs and security group.

7
00:00:13,710 --> 00:00:17,550
Now, for shortness purposes, I will refer to network ACLs

8
00:00:17,550 --> 00:00:19,860
at NACLs sometimes, N-A-C-L.

9
00:00:19,860 --> 00:00:21,580
All right, so we have an EC2 instance

10
00:00:21,580 --> 00:00:24,302
and we know from a long time ago now

11
00:00:24,302 --> 00:00:26,720
that we have a security group around it.

12
00:00:26,720 --> 00:00:29,870
Now, our EC2 instance resides within the subnets,

13
00:00:29,870 --> 00:00:33,500
so left of a blue vertical bar is my subnet

14
00:00:33,500 --> 00:00:35,430
and so outside my subnet,

15
00:00:35,430 --> 00:00:38,480
there is a network access control list or NACL.

16
00:00:38,480 --> 00:00:40,340
And that's at a subnet level,

17
00:00:40,340 --> 00:00:42,840
so it's before traffic even gets

18
00:00:42,840 --> 00:00:45,100
into our subnet or EC2 instance.

19
00:00:45,100 --> 00:00:47,160
So let's evaluate an incoming request.

20
00:00:47,160 --> 00:00:50,270
Say for example that our EC2 is a web server

21
00:00:50,270 --> 00:00:53,760
and we expose in the Apache application on port 22

22
00:00:53,760 --> 00:00:56,130
and we want to see how the request works.

23
00:00:56,130 --> 00:00:58,650
So the incoming request will come from the right-hand side

24
00:00:58,650 --> 00:01:01,240
and the first thing that will get evaluated

25
00:01:01,240 --> 00:01:04,000
is the network ACL inbound rules.

26
00:01:04,000 --> 00:01:06,540
And we'll see whether or not the inbound rule works.

27
00:01:06,540 --> 00:01:08,450
If the inbound rule passes,

28
00:01:08,450 --> 00:01:10,490
then it will get passed on

29
00:01:10,490 --> 00:01:13,153
to the security group inbound rule

30
00:01:13,153 --> 00:01:15,340
because the traffic will go and will bass the subnet edge,

31
00:01:15,340 --> 00:01:17,420
will go into the security group firewall

32
00:01:17,420 --> 00:01:20,600
and we will evaluate the security group inbound rule.

33
00:01:20,600 --> 00:01:23,240
If that rule passes, then our EC2 instance

34
00:01:23,240 --> 00:01:25,570
receive the request on the web server

35
00:01:25,570 --> 00:01:26,850
and now is going to serve it.

36
00:01:26,850 --> 00:01:28,420
So it's going to say Here Is My Web Page

37
00:01:28,420 --> 00:01:30,780
and now it has to send back the traffic

38
00:01:30,780 --> 00:01:32,260
to the requester.

39
00:01:32,260 --> 00:01:34,180
So, the first thing is that the outbound

40
00:01:34,180 --> 00:01:36,570
will be allowed no matter what,

41
00:01:36,570 --> 00:01:39,380
because security groups are stateful.

42
00:01:39,380 --> 00:01:41,776
That means if an inbound request passes,

43
00:01:41,776 --> 00:01:44,820
then the outbound request will pass as well,

44
00:01:44,820 --> 00:01:48,020
even if there is a rule to deny any traffic

45
00:01:48,020 --> 00:01:49,860
out of the EC2 instance.

46
00:01:49,860 --> 00:01:52,630
An inbound rule passes, then the outbound rule

47
00:01:52,630 --> 00:01:53,550
passes as well.

48
00:01:53,550 --> 00:01:55,920
And then because the outbound rule passed,

49
00:01:55,920 --> 00:01:58,870
we go into the network ACL rules

50
00:01:58,870 --> 00:02:01,380
and we evaluate the NACL outbound rules

51
00:02:01,380 --> 00:02:03,281
and that is stateless.

52
00:02:03,281 --> 00:02:05,630
That means that outbound rule will get evaluated.

53
00:02:05,630 --> 00:02:08,090
So that's the structure of an incoming request.

54
00:02:08,090 --> 00:02:09,750
The really cool thing to note here

55
00:02:09,750 --> 00:02:12,570
is that for our network ACL, this is stateless,

56
00:02:12,570 --> 00:02:16,090
so both the inbound rules and the outbound rules

57
00:02:16,090 --> 00:02:19,080
will get evaluated, where as for a security group,

58
00:02:19,080 --> 00:02:22,550
if the inbound rule allowed the traffic to go in,

59
00:02:22,550 --> 00:02:23,530
then the security group

60
00:02:23,530 --> 00:02:26,870
will allow the traffic to go out for that request.

61
00:02:26,870 --> 00:02:28,190
Super important.

62
00:02:28,190 --> 00:02:31,130
Let's do it again, but for an outgoing request now.

63
00:02:31,130 --> 00:02:33,890
The same, we have our EC2 instance with a security group

64
00:02:33,890 --> 00:02:35,860
and it's behind a subnet

65
00:02:35,860 --> 00:02:38,800
and we have a NACL at the subnet level

66
00:02:38,800 --> 00:02:40,420
and now we're looking at outgoing request

67
00:02:40,420 --> 00:02:44,550
so this time, our EC2 instance is making a request,

68
00:02:44,550 --> 00:02:47,010
an outgoing one, so it's making,

69
00:02:47,010 --> 00:02:49,510
we're going to evaluate the security group outbound rules

70
00:02:49,510 --> 00:02:52,640
to make sure that they can leave the EC2 instance.

71
00:02:52,640 --> 00:02:55,800
Then it's going to get into the NACL outbound rules

72
00:02:55,800 --> 00:02:57,613
to make sure it works,

73
00:02:57,613 --> 00:02:59,180
so now we request in maybe google.com

74
00:02:59,180 --> 00:03:01,910
to respond to us. Google.com give us the reply.

75
00:03:01,910 --> 00:03:04,110
We receive a request back from Google,

76
00:03:04,110 --> 00:03:06,300
It's an inbound rule, this time, that will get evaluated

77
00:03:06,300 --> 00:03:08,334
and that is stateless, so it will get evaluated,

78
00:03:08,334 --> 00:03:11,720
and then it goes back into our EC2 instance,

79
00:03:11,720 --> 00:03:14,700
but inbound will be allowed, no matter what,

80
00:03:14,700 --> 00:03:16,590
because this is stateful, okay,

81
00:03:16,590 --> 00:03:18,380
and we've seen that very often.

82
00:03:18,380 --> 00:03:19,948
If we query google.com,

83
00:03:19,948 --> 00:03:22,210
the request comes back to us

84
00:03:22,210 --> 00:03:24,940
even though we haven't opened any port on our EC2 instance.

85
00:03:24,940 --> 00:03:26,370
I guess that makes sense now.

86
00:03:26,370 --> 00:03:28,280
So this is really important for you to understand and see

87
00:03:28,280 --> 00:03:30,319
because this matters a lot.

88
00:03:30,319 --> 00:03:31,810
We'll see this in the hands-on,

89
00:03:31,810 --> 00:03:33,693
just to test out if you use cases.

90
00:03:33,693 --> 00:03:34,900
So, what are network ACLs?

91
00:03:34,900 --> 00:03:36,360
Well, they're like a firewall

92
00:03:36,360 --> 00:03:39,210
that control access from and to a subnet.

93
00:03:39,210 --> 00:03:40,710
So it's at a subnet level.

94
00:03:40,710 --> 00:03:42,620
And the default NACL allows

95
00:03:42,620 --> 00:03:44,510
everything outbound and everything inbound,

96
00:03:44,510 --> 00:03:47,660
so it doesn't restrict anything, which is great

97
00:03:47,660 --> 00:03:49,330
when you wanna get started,

98
00:03:49,330 --> 00:03:51,790
and you define one NACL per subnet,

99
00:03:51,790 --> 00:03:53,480
and new subnets will be assigned

100
00:03:53,480 --> 00:03:55,540
the default NACL by default.

101
00:03:55,540 --> 00:03:57,410
Now, to define NACL rules,

102
00:03:57,410 --> 00:04:00,809
you'd basically assign a number between one and 32,766

103
00:04:00,809 --> 00:04:04,628
and basically, if the rule has a low number,

104
00:04:04,628 --> 00:04:07,320
then they have a higher precedence.

105
00:04:07,320 --> 00:04:08,720
That means that they will,

106
00:04:08,720 --> 00:04:10,546
as soon as there's a match,

107
00:04:10,546 --> 00:04:11,379
the rule is being evaluated

108
00:04:11,379 --> 00:04:13,250
and it's the highest number that wins.

109
00:04:13,250 --> 00:04:14,860
So, if you define for example,

110
00:04:14,860 --> 00:04:19,860
100 Allow IP and 200 Deny IP, then the IP will be allowed

111
00:04:20,520 --> 00:04:23,493
overall because 100 is less than 200.

112
00:04:24,760 --> 00:04:26,460
Last rule will be an asterisk

113
00:04:26,460 --> 00:04:28,950
and that means that all the requests will be denied

114
00:04:28,950 --> 00:04:31,130
if there's no rule match, and you can't change that,

115
00:04:31,130 --> 00:04:33,165
and overall when you start adding rules,

116
00:04:33,165 --> 00:04:36,180
AWS recommends adding rules by increment of 100,

117
00:04:36,180 --> 00:04:39,110
just in case you wanna add rules later in between.

118
00:04:39,110 --> 00:04:42,630
Now, if you great a new NACL, then it will deny everything

119
00:04:42,630 --> 00:04:44,690
and overall, we'll see use case of NACL.

120
00:04:44,690 --> 00:04:46,400
They're a great way, for example,

121
00:04:46,400 --> 00:04:49,830
of blocking a specific IP at the subnet level.

122
00:04:49,830 --> 00:04:51,280
So let's have a play with those right now

123
00:04:51,280 --> 00:04:53,360
to understand exactly how they work.

124
00:04:53,360 --> 00:04:55,500
So I'm going to my network ACLs right here

125
00:04:55,500 --> 00:04:58,370
on the bottom left, and as we can see,

126
00:04:58,370 --> 00:04:59,673
if I select a VPC to be the demo VPC,

127
00:04:59,673 --> 00:05:03,820
I have one network ACL and that's the default NACL,

128
00:05:03,820 --> 00:05:05,840
this one that was created by default

129
00:05:05,840 --> 00:05:08,040
and it's associated with four subnets.

130
00:05:08,040 --> 00:05:09,180
Okay, excellent.

131
00:05:09,180 --> 00:05:10,580
So if we look at inbound rules,

132
00:05:10,580 --> 00:05:13,290
we see that's all traffic and all port,

133
00:05:13,290 --> 00:05:15,530
all protocols from anywhere is allowed

134
00:05:15,530 --> 00:05:17,206
in this rule number 100.

135
00:05:17,206 --> 00:05:20,450
Whereas all traffic from anywhere else

136
00:05:20,450 --> 00:05:22,260
is the denied, so that's rule with an asterisk.

137
00:05:22,260 --> 00:05:24,399
That means that if there's no rule match, then deny it.

138
00:05:24,399 --> 00:05:26,400
And for outbound rules, again,

139
00:05:26,400 --> 00:05:28,525
all outbound traffic is allowed

140
00:05:28,525 --> 00:05:30,230
and that's rule number 100,

141
00:05:30,230 --> 00:05:32,080
and then if it doesn't match any rules,

142
00:05:32,080 --> 00:05:34,270
then the star will set it deny.

143
00:05:34,270 --> 00:05:36,350
All right, so now let's have the play.

144
00:05:36,350 --> 00:05:37,670
So what I'm going to do is that

145
00:05:37,670 --> 00:05:40,150
I'm going to go on my EC2 instance, the public one,

146
00:05:40,150 --> 00:05:42,650
and I'm going to run the small Apache server.

147
00:05:42,650 --> 00:05:45,010
So I'm going to modify the inbound rules for this one,

148
00:05:45,010 --> 00:05:47,690
so I'm going to my launch wizard, inbound,

149
00:05:47,690 --> 00:05:51,340
and I'm going to edit and add an HTP rule

150
00:05:51,340 --> 00:05:54,650
to allow from anywhere to connect to my EC2 instance.

151
00:05:54,650 --> 00:05:56,310
So I'll say, OK, great.

152
00:05:56,310 --> 00:05:58,620
Now, let's SSH into this instance.

153
00:05:58,620 --> 00:06:00,020
Actually, it's already done,

154
00:06:00,857 --> 00:06:02,340
so if I just disconnect from my private instance.

155
00:06:02,340 --> 00:06:04,020
Here I am, I am in my public one.

156
00:06:04,020 --> 00:06:06,230
We can just SSH again using your command,

157
00:06:06,230 --> 00:06:08,600
so we're back into my public instance.

158
00:06:08,600 --> 00:06:10,140
Now, I'm going to do sudo su

159
00:06:11,210 --> 00:06:14,823
yum install httpd.

160
00:06:16,820 --> 00:06:17,653
Yes.

161
00:06:19,604 --> 00:06:21,437
Systemctl enable httpd

162
00:06:24,770 --> 00:06:28,940
then systemctl start httpd

163
00:06:28,940 --> 00:06:30,980
and then we're going to echo hello world

164
00:06:32,463 --> 00:06:36,842
into var dub dub dub html index.html.

165
00:06:36,842 --> 00:06:38,671
Okay,

166
00:06:38,671 --> 00:06:42,950
so now if we go to our public instance public IP,

167
00:06:42,950 --> 00:06:45,400
so this one, and we open a new window

168
00:06:45,400 --> 00:06:46,830
the we get hello world back.

169
00:06:46,830 --> 00:06:48,860
Excellent, so this is just the basics.

170
00:06:48,860 --> 00:06:52,579
So right now, our NACL allows every traffic in

171
00:06:52,579 --> 00:06:55,940
and then obviously, we get back to this hello world page.

172
00:06:55,940 --> 00:06:58,650
So now, if we edit our inbound rules

173
00:06:58,650 --> 00:07:00,320
and we wanna add a rule, so for example,

174
00:07:00,320 --> 00:07:02,810
the rule number is going to be 80,

175
00:07:02,810 --> 00:07:05,210
just to have a rule that will have higher precedence

176
00:07:05,210 --> 00:07:06,690
and I will say OK.

177
00:07:06,690 --> 00:07:09,210
Inbound rules http.

178
00:07:09,210 --> 00:07:12,100
I'm going to just deny it from anywhere,

179
00:07:12,100 --> 00:07:16,440
so here I denied http traffic on my inbound.

180
00:07:16,440 --> 00:07:18,950
As you can see, well, it looks like it's denied

181
00:07:18,950 --> 00:07:22,000
so if I refresh my page right here,

182
00:07:22,000 --> 00:07:23,978
you see it starts to time out.

183
00:07:23,978 --> 00:07:25,400
There's like an everloading thing.

184
00:07:25,400 --> 00:07:27,410
So right now, it shows that yes,

185
00:07:27,410 --> 00:07:30,510
I cannot access my instance on port 80,

186
00:07:30,510 --> 00:07:33,100
even though my security group has not changed.

187
00:07:33,100 --> 00:07:34,870
You see port 80 is still allowed,

188
00:07:34,870 --> 00:07:38,340
but now NACL is actually stopping my request right now.

189
00:07:38,340 --> 00:07:42,070
So if I change this rule and now make this 200

190
00:07:42,070 --> 00:07:43,820
instead of making it 80,

191
00:07:43,820 --> 00:07:46,450
because 200 is more than 100 then,

192
00:07:46,450 --> 00:07:48,310
basically, what do you think will happen?

193
00:07:48,310 --> 00:07:51,840
Well, because all traffic will be matched first as a rule,

194
00:07:51,840 --> 00:07:53,100
then this will never be matched

195
00:07:53,100 --> 00:07:55,070
and so our traffic should be allowed.

196
00:07:55,070 --> 00:07:57,090
So if we stop this and refresh this page,

197
00:07:57,090 --> 00:07:59,460
now we get the hello world back.

198
00:07:59,460 --> 00:08:00,890
Excellent, right?

199
00:08:00,890 --> 00:08:03,970
So now, to have a look at this statefulness

200
00:08:03,970 --> 00:08:05,490
of our EC2 instance.

201
00:08:05,490 --> 00:08:08,350
For example, right now, let's go to our launch,

202
00:08:08,350 --> 00:08:10,370
to our security group.

203
00:08:10,370 --> 00:08:13,370
As we can see, outbound, it allows all traffic,

204
00:08:13,370 --> 00:08:15,530
but I'm just going to remove this,

205
00:08:15,530 --> 00:08:17,600
so now, all traffic is denied.

206
00:08:17,600 --> 00:08:19,738
So if I go back to my EC2 instance,

207
00:08:19,738 --> 00:08:21,930
actually, it's blocked because actually

208
00:08:21,930 --> 00:08:23,270
all traffic is denied.

209
00:08:23,270 --> 00:08:25,960
I can't even touch anything right here,

210
00:08:25,960 --> 00:08:29,240
but if we still access the url, it will work.

211
00:08:29,240 --> 00:08:32,490
So even though all outbound traffic is denied,

212
00:08:32,490 --> 00:08:35,338
then, because we can access it

213
00:08:35,338 --> 00:08:38,601
through this inbound rule on port 80,

214
00:08:38,601 --> 00:08:42,270
then because the security group is stateful,

215
00:08:42,270 --> 00:08:44,200
we also get the response back no matter what.

216
00:08:44,200 --> 00:08:45,650
So this works still,

217
00:08:45,650 --> 00:08:48,730
even though there is no outbound rules right here.

218
00:08:48,730 --> 00:08:53,140
So, for sake, I'm just going to allow all traffic again

219
00:08:53,140 --> 00:08:56,470
from anywhere, so anywhere, here we go.

220
00:08:56,470 --> 00:08:58,217
Just to put it back as normal.

221
00:08:58,217 --> 00:09:02,230
So this just show the statefulness of our security group.

222
00:09:02,230 --> 00:09:05,390
So here, you could play a little bit and see what happens.

223
00:09:05,390 --> 00:09:07,346
Basically, you should change the network ACLs

224
00:09:07,346 --> 00:09:10,380
where you deny http traffic, et cetera, et cetera.

225
00:09:10,380 --> 00:09:12,120
But the really cool thing is now you can start

226
00:09:12,120 --> 00:09:15,360
editing your rules and choose whatever you want.

227
00:09:15,360 --> 00:09:18,490
So, you can log a specific IP, for example.

228
00:09:18,490 --> 00:09:20,220
You can say rule number 80.

229
00:09:20,220 --> 00:09:22,570
And you will say OK, All Traffic

230
00:09:23,460 --> 00:09:26,270
All Traffic, and then you would have to put your IP

231
00:09:26,270 --> 00:09:29,672
so you put 11-22-33-44, whatever your IP is,

232
00:09:29,672 --> 00:09:32,420
slash 32 and deny

233
00:09:32,420 --> 00:09:34,990
and this will effectively block your IP

234
00:09:34,990 --> 00:09:38,670
from accessing any of your resources in your network ACL

235
00:09:38,670 --> 00:09:40,840
so this could be quite interesting what you can do with it

236
00:09:40,840 --> 00:09:43,220
and this will would be the primary usage

237
00:09:43,220 --> 00:09:44,680
of a network ACL

238
00:09:44,680 --> 00:09:47,130
is to basically deny all traffic.

239
00:09:47,130 --> 00:09:49,080
Now, outbound rules, we have to be very careful

240
00:09:49,080 --> 00:09:51,340
because they also get evaluated.

241
00:09:51,340 --> 00:09:53,610
So if I go and edit my outbound rule,

242
00:09:53,610 --> 00:09:55,160
right now, let's see.

243
00:09:55,160 --> 00:09:57,163
This website works, it's just fine,

244
00:09:58,059 --> 00:10:00,400
but if I go back to my network ACL

245
00:10:00,400 --> 00:10:02,360
and remove this outbound rule.

246
00:10:02,360 --> 00:10:07,320
So for example, I will say deny all traffic from anywhere.

247
00:10:07,320 --> 00:10:08,500
Let's do this.

248
00:10:08,500 --> 00:10:10,200
Deny all traffic from anywhere

249
00:10:10,200 --> 00:10:12,380
and if I try to refresh,

250
00:10:12,380 --> 00:10:14,820
well my EC2 instance get my request

251
00:10:14,820 --> 00:10:17,090
and then it went back through the security group,

252
00:10:17,090 --> 00:10:21,340
but then because the network ACL outbound rules denied me

253
00:10:21,340 --> 00:10:23,530
from doing this request, then the request

254
00:10:23,530 --> 00:10:25,980
is not coming a back to me and I get a time out.

255
00:10:25,980 --> 00:10:28,070
So it's very important for you to see that

256
00:10:28,070 --> 00:10:30,317
this network ACLs are stateless,

257
00:10:30,317 --> 00:10:33,810
that means both the inbound rules and the outbound rules

258
00:10:33,810 --> 00:10:36,160
get evaluated at every request.

259
00:10:36,160 --> 00:10:38,610
So I click on Save, and we're back to normal.

260
00:10:38,610 --> 00:10:39,920
So super important, right?

261
00:10:39,920 --> 00:10:41,870
So here is the very handy comparison

262
00:10:41,870 --> 00:10:44,250
between network Acls and security group.

263
00:10:44,250 --> 00:10:46,170
So security group is at the instance level

264
00:10:46,170 --> 00:10:49,360
whereas network ACL is at the subnet level.

265
00:10:49,360 --> 00:10:51,400
Security groups support allow rules only

266
00:10:51,400 --> 00:10:54,620
where as this support allow and explicit deny rules.

267
00:10:54,620 --> 00:10:56,600
It is stateful, so that means the return traffic

268
00:10:56,600 --> 00:10:58,687
is automatically allowed, regardless of any rules

269
00:10:58,687 --> 00:11:00,600
and we just demonstrated this,

270
00:11:00,600 --> 00:11:02,630
whereas network ACL is stateless

271
00:11:02,630 --> 00:11:04,600
so the return traffic must be explicitly

272
00:11:04,600 --> 00:11:06,470
allowed by the rules.

273
00:11:06,470 --> 00:11:09,160
Then for security group, all the rules are evaluated

274
00:11:09,160 --> 00:11:11,070
before deciding whether to allow traffic,

275
00:11:11,070 --> 00:11:13,940
whereas for network ACLs, we look at the rule number

276
00:11:13,940 --> 00:11:15,330
and the one with the lowest number

277
00:11:15,330 --> 00:11:18,290
that matches the traffic winds

278
00:11:18,290 --> 00:11:20,980
and then this security group applies to an instance

279
00:11:20,980 --> 00:11:22,620
only if someone specifies security group

280
00:11:22,620 --> 00:11:25,460
when launching the instance or associate later on,

281
00:11:25,460 --> 00:11:27,500
whereas this one automatically applies

282
00:11:27,500 --> 00:11:29,950
to all instances in the subnet associated with.

283
00:11:30,958 --> 00:11:32,450
So we don't have to rely to users

284
00:11:32,450 --> 00:11:33,800
to specify the security group

285
00:11:33,800 --> 00:11:36,360
and that gives you another line of defense.

286
00:11:36,360 --> 00:11:37,690
Finally, if you're wondering what

287
00:11:37,690 --> 00:11:40,010
a strict network ACL looks like, have a look at this link.

288
00:11:40,010 --> 00:11:41,970
So let's look at it together.

289
00:11:41,970 --> 00:11:44,376
So in this example, we have a network ACL

290
00:11:44,376 --> 00:11:47,030
and if we scroll down, it shows us

291
00:11:47,030 --> 00:11:48,643
a default network ACL.

292
00:11:48,643 --> 00:11:49,520
This is the one we have from before

293
00:11:49,520 --> 00:11:53,050
where everything is allowed and then the rest is denied

294
00:11:53,050 --> 00:11:56,410
and then if we scroll down, we get a custom network ACL,

295
00:11:56,410 --> 00:11:58,850
an example of it, so if you look at it,

296
00:11:58,850 --> 00:12:00,850
for example, here, inbound

297
00:12:00,850 --> 00:12:03,820
allows anything on port 80 for http.

298
00:12:03,820 --> 00:12:06,270
Anything on port 443 for https.

299
00:12:06,270 --> 00:12:09,020
SSH only from a very small siter,

300
00:12:09,020 --> 00:12:11,320
that is a private home network siter,

301
00:12:11,320 --> 00:12:13,800
and RDP which is the SSH for Windows

302
00:12:13,800 --> 00:12:15,200
as well on the same siter,

303
00:12:15,200 --> 00:12:19,360
and then there is a custom TCP inbound for these ports

304
00:12:19,360 --> 00:12:20,630
which are very high ports

305
00:12:20,630 --> 00:12:22,600
and they are called ephemeral ports

306
00:12:22,600 --> 00:12:24,230
and they're basically ports

307
00:12:24,230 --> 00:12:26,715
that can be selected and we'll see what that means,

308
00:12:26,715 --> 00:12:28,840
this is basically how the network connections

309
00:12:28,840 --> 00:12:31,610
on the internet work when there's a request and response

310
00:12:31,610 --> 00:12:33,500
and then every traffic else is denied.

311
00:12:33,500 --> 00:12:36,117
So this is quite a restrictive network ACL

312
00:12:36,117 --> 00:12:39,080
and then on the outbound, let's have a look.

313
00:12:39,080 --> 00:12:41,740
It allows port 80, port 443,

314
00:12:41,740 --> 00:12:44,630
and then it allows all these ephemeral ports again

315
00:12:44,630 --> 00:12:47,230
to be allowed and we'll see what ephemeral ports right now.

316
00:12:47,230 --> 00:12:48,940
So if we scroll down,

317
00:12:48,940 --> 00:12:50,970
you're finding that ephemeral ports

318
00:12:50,970 --> 00:12:52,864
are defined in this example to be this range.

319
00:12:52,864 --> 00:12:55,760
But basically, let's look at it why.

320
00:12:55,760 --> 00:12:57,620
A client that initiates a request

321
00:12:57,620 --> 00:13:00,760
chooses the ephemeral port range, which is in this range,

322
00:13:00,760 --> 00:13:03,100
and then the responding system

323
00:13:03,100 --> 00:13:04,570
gives us back the answer at this port.

324
00:13:04,570 --> 00:13:05,970
So we need to open these ports.

325
00:13:05,970 --> 00:13:09,260
But basically, if you use a Linux kernel,

326
00:13:09,260 --> 00:13:10,610
they will be this range.

327
00:13:10,610 --> 00:13:13,360
If you use an ELB, it'll be a much wider range.

328
00:13:13,360 --> 00:13:17,750
So 124 to 65,535

329
00:13:17,750 --> 00:13:20,204
and if you use Windows server, it'll be a smaller range,

330
00:13:20,204 --> 00:13:23,050
125 to 5,000, et cetera, et cetera.

331
00:13:23,050 --> 00:13:25,290
So based on the operating system that you choose,

332
00:13:25,290 --> 00:13:27,450
the ephemeral port that comes back

333
00:13:27,450 --> 00:13:30,675
into your infrastructure may be different.

334
00:13:30,675 --> 00:13:32,420
And so, in practice, it says,

335
00:13:32,420 --> 00:13:33,820
to cover the different types of client

336
00:13:33,820 --> 00:13:36,210
that might initiate traffic to public-facing instances

337
00:13:36,210 --> 00:13:39,310
in your VPC, you can open ephemeral ports

338
00:13:39,310 --> 00:13:42,680
124 to 65,535.

339
00:13:42,680 --> 00:13:44,520
So this is very important for you to see

340
00:13:44,520 --> 00:13:46,060
and then it says that you can add rules

341
00:13:46,060 --> 00:13:49,220
explicitly to deny traffic on any malicious port

342
00:13:49,220 --> 00:13:50,370
within that range.

343
00:13:50,370 --> 00:13:52,620
So this is super important for you to understand.

344
00:13:52,620 --> 00:13:54,790
Again, not something we have to implement right now,

345
00:13:54,790 --> 00:13:57,590
but ephemeral ports must be opened

346
00:13:57,590 --> 00:14:00,350
in the network ACLs if you have a very strict one.

347
00:14:00,350 --> 00:14:02,040
Finally, last thing, promise.

348
00:14:02,040 --> 00:14:03,890
If you create a new network ACL,

349
00:14:03,890 --> 00:14:07,260
so if you create a new network ACL for your VPC,

350
00:14:07,260 --> 00:14:09,480
by default, everything will be denied,

351
00:14:09,480 --> 00:14:12,410
so if you look at this new NACL inbound rules,

352
00:14:12,410 --> 00:14:13,680
everything is denied.

353
00:14:13,680 --> 00:14:15,210
In outbound rules, everything is denied.

354
00:14:15,210 --> 00:14:17,860
So we need to manually add our rules

355
00:14:17,860 --> 00:14:20,610
and then we could associate that with different subnets.

356
00:14:20,610 --> 00:14:21,610
So that's it for this lecture.

357
00:14:21,610 --> 00:14:22,600
I hope you enjoyed it.

358
00:14:22,600 --> 00:14:23,760
I know that was really long

359
00:14:23,760 --> 00:14:26,330
but I hope it makes sense into what ACLs are

360
00:14:26,330 --> 00:14:27,410
versus security groups,

361
00:14:27,410 --> 00:14:29,360
and I will see you in the next lecture.

